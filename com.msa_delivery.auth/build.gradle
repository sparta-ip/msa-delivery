plugins {
	id 'java'
	id 'org.springframework.boot' version '3.4.0'
	id 'io.spring.dependency-management' version '1.1.6'
	// 플러그인 추가
	id 'com.epages.restdocs-api-spec' version "0.19.2"
}

group = 'com.msa_delivery'
version = '0.0.1-SNAPSHOT'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(17)
	}
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

ext {
	set('springCloudVersion', "2024.0.0")
}

dependencyManagement {
	imports {
		mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
	}
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-actuator'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'io.jsonwebtoken:jjwt:0.12.6'
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.cloud:spring-cloud-starter-netflix-eureka-client'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	compileOnly 'org.projectlombok:lombok'
	runtimeOnly 'org.postgresql:postgresql'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.security:spring-security-test'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

	implementation 'io.github.resilience4j:resilience4j-spring-boot3:2.2.0'
	implementation 'org.springframework.boot:spring-boot-starter-aop'
	runtimeOnly 'io.micrometer:micrometer-registry-prometheus'

	implementation 'io.micrometer:micrometer-tracing-bridge-brave'
	implementation 'io.github.openfeign:feign-micrometer'
	implementation 'io.zipkin.reporter2:zipkin-reporter-brave'

	// restdocs & openapi
	testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc'
	implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.6.0'
	testImplementation 'com.epages:restdocs-api-spec-mockmvc:0.19.2'
}

clean {
	delete file('src/main/generated')
}

tasks.named('test') {
	useJUnitPlatform()
}

// 컴파일 시 빌드 폴더를 지웁니다.
compileJava {
	dependsOn 'clean'
}

// OpenApi에 들어갈 메타데이터를 추가합니다.
// 모놀리식일 경우 해당 프로젝트의 주소를 입력하고,
// MSA일 경우 게이트웨이의 주소를 입력하면 됩니다.
openapi3 {
	servers = [
			{
				url = 'http://localhost:19091'
			}
	]
	title = 'USER API'
	description = ''
	version = '1.0.0'
	format = 'json'
}

// task를 만듭니다.
tasks.register('setDocs') {
	// openapi3 태스크를 먼저 실행합니다.
	dependsOn 'openapi3'
	// 문서가 다 생성되면 build 파일에 복사합니다.
	// MSA일 경우 파일명이 중복될 수 있으므로,
	// 파일명 뒤에 서비스명을 붙여줍시다.
	doLast {
		copy {
			from "build/api-spec"
			include "*.json"
			include "*.yaml"
			into "build/resources/main/static/springdoc"
			rename { String fileName ->
				if (fileName.endsWith('.json')) {
					return fileName.replace('.json', '-auth-service.json')
				} else if (fileName.endsWith('.yaml')) {
					return fileName.replace('.yaml', '-auth-service.yml')
				}
				return fileName
			}
		}
	}
}

// bootRun 실행 시 문서 생성 태스크를 실행합니다.
bootRun {
	dependsOn 'setDocs'
}

// bootJar 실행 시 문서 생성 태스크를 실행합니다.
bootJar {
	dependsOn 'setDocs'
}